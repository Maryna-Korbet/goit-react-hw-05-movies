{"version":3,"file":"static/js/219.6b37e0e4.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","components/Loader/Loader.js","services/fetchDataApi.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 16px;\n  margin: 0 auto;\n  padding: 10px;\n  list-style: none;\n  img {\n    padding: 10px;\n    border-radius: 15px;\n    box-shadow: 0px 8px 8px -1px rgb(0 0 0 / 20%),\n    0px 8px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  }\n`;\n\nexport const NoPosterImg = styled.div`\n  width: 200px;\n  height: 300px;\n  background-color: light-gray;\n  border-radius: 15px;\n  box-shadow: 0px 8px 8px -1px rgb(0 0 0 / 20%),\n  0px 8px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n`;\n\n","import { fetchMovieCast } from 'services/fetchDataApi';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Loader  from 'components/Loader/Loader';\nimport { Container, NoPosterImg } from 'components/Cast/Cast.styled';\n\nconst ERROR_MESSAGE = 'Error information loading'; \n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castInfo, setCastInfo] = useState([]);\n  const [error, setError] = useState(null);\n  const [notFound, setNotFound] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function getSearchCast() {\n      try {\n          const response = await fetchMovieCast(movieId);\n          const castInfo = response.data.cast;\n          \n          if (castInfo.length === 0) {\n              setNotFound(true);\n              return;\n          }\n          setCastInfo(castInfo);\n      } catch {\n          setError(ERROR_MESSAGE);\n      } finally{\n        setIsLoading(false);\n      }\n    }\n  getSearchCast();\n  }, [movieId]);\n  \n  return (\n    <div>\n      {error && <p style={{ color: 'red'}}>{ERROR_MESSAGE}</p>}\n      {notFound && <p style={{ color: 'orangered'}}>No character information</p>}\n      {castInfo && isLoading && <Loader />}\n\n      {castInfo && !notFound && !isLoading && (\n        <Container>\n        {castInfo.map(({ id, profile_path, character, name }) => {\n          return (\n            <li key={id}>\n              {profile_path ? (\n                <img\n                  src={'https://image.tmdb.org/t/p/w500' + profile_path}\n                  alt={name}\n                  width={200}\n                />\n                ) : (<NoPosterImg>No poster</NoPosterImg>)\n                }\n                <p>\n                  <b>Character: </b>\n                  {character}\n                </p>\n                <p>\n                  <b>Name:</b> {name}\n                </p>\n              </li>\n            );\n          })}\n        </Container>\n      )}\n    </div>\n  );\n}\n\nexport default Cast;","import { Grid } from 'react-loader-spinner';\n\nfunction Loader() {\n    return (\n        <Grid\n            display=\"flex\"\n            justifyContent=\"space-around\"\n            padding=\"50px\"\n            height=\"30\"\n            width=\"30\"\n            color=\"orangered\"\n            ariaLabel=\"grid-loading\"\n            radius=\"12.5\"\n        />\n    );\n};\n\nexport default Loader;","import axios from 'axios';\n\nconst KEY = 'd1974eedcccfa08b3dec022ac0b9b390';\naxios.defaults.baseURL= 'https://api.themoviedb.org/3/';\n\nconst ERROR_MESSAGE = 'Error. Request failed.';\n\n// Request for Home\nexport async function fetchTrendingMovies() {\n    try {\n        const response = await axios.get(`trending/all/day?api_key=${KEY}`, {\n          params: {\n            api_key: KEY,\n          },\n        },\n        );\n        return response.data.results;\n      } catch {\n        console.log(ERROR_MESSAGE);\n      }\n}\n\n// Request for Movies\nexport async function fetchSearchMovies(search) {\n  try {\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: KEY,\n        query: search,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.log(ERROR_MESSAGE);\n  }\n}\n\n// Request for MovieDetails\nexport async function fetchMovieById(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n    return response;\n  } catch {\n    console.log(ERROR_MESSAGE);\n  }\n}\n\n// Request for Cast\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.log(ERROR_MESSAGE);\n  }\n}\n\n// Request for Reviews\nexport async function fetchMovieReviews(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.log(ERROR_MESSAGE);\n  }\n}","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["Container","styled","NoPosterImg","ERROR_MESSAGE","movieId","useParams","useState","castInfo","setCastInfo","error","setError","notFound","setNotFound","isLoading","setIsLoading","useEffect","fetchMovieCast","response","data","cast","length","getSearchCast","style","color","Loader","map","id","profile_path","character","name","src","alt","width","display","justifyContent","padding","height","ariaLabel","radius","KEY","axios","fetchTrendingMovies","params","api_key","results","console","log","fetchSearchMovies","search","query","fetchMovieById","fetchMovieReviews","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value"],"sourceRoot":""}