{"version":3,"file":"static/js/764.91ef9b25.chunk.js","mappings":"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","sources":["components/Loader/Loader.js","components/MoviesGallery/MoviesGallery.js","pages/Movies.js","services/fetchDataApi.js"],"sourcesContent":["import { Grid } from 'react-loader-spinner';\n\nfunction Loader() {\n    return (\n        <Grid\n            display=\"flex\"\n            justifyContent=\"space-around\"\n            padding=\"50px\"\n            height=\"30\"\n            width=\"30\"\n            color=\"orangered\"\n            ariaLabel=\"grid-loading\"\n            radius=\"12.5\"\n        />\n    );\n};\n\nexport default Loader;","import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesGallery = ({ movies }) => {\n  const location = useLocation();\n  \n  return (\n    <ul>\n        {movies?.map(({id, title, name}) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{from: location}}>\n            {title ?? name}\n            </Link>\n          </li>\n        ))}\n      </ul>\n  );\n};\n\nexport default MoviesGallery;","import { fetchSearchMovies } from 'services/fetchDataApi';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { BsSearch } from 'react-icons/bs';\nimport Loader from 'components/Loader/Loader';\nimport MoviesGallery from 'components/MoviesGallery/MoviesGallery';\n\nconst ERROR_MESSAGE = 'Error fetch movies.'; \n\nconst Movies = () => {\n    const [movies, setMovies] = useState('');\n    const [notFound, setNotFound] = useState(false);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('search') ?? '';\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        setIsLoading(true);\n\n        if (query === '') {\n            return;\n        };\n\n        async function getSearchMovies() {\n            try {\n                const response = await fetchSearchMovies(query, {signal});\n                const movies = response.data.results;\n                \n                if (movies.length === 0) {\n                    setNotFound(true);\n                    return;\n                }\n\n                setMovies(movies);\n            } catch {\n                setError(ERROR_MESSAGE);\n            } \n            finally{\n                setIsLoading(false);\n            }\n        }\n        getSearchMovies();\n\n        return() => {\n            controller.abort();\n        }   \n    }, [query]);\n\n    function handlerSubmit(e) {\n        const searchQuery = e.currentTarget.elements.search.value;\n        setSearchParams({ search: searchQuery });\n        setMovies('');\n    }   \n\n    return (\n        <div>\n            <form onSubmit={handlerSubmit}>\n            <input\n                name=\"search\"\n                type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movie\"\n            />\n            <button type=\"submit\">\n                <BsSearch size={10} />\n            </button>\n            </form>\n\n            {query && isLoading && <Loader />}\n            {error && <p style={{ color: 'red'}}>{ERROR_MESSAGE}</p>}\n            {movies.length > 0 && !notFound && !isLoading && (<MoviesGallery movies={movies} />)}\n            {query && notFound && !isLoading && <p style={{ color: 'orangered'}}>Movie with this title not found</p>}\n        </div>\n    );\n};\n\nexport default Movies;\n\n\n\n\n\n\n","import axios from 'axios';\n\nconst KEY = 'd1974eedcccfa08b3dec022ac0b9b390';\naxios.defaults.baseURL= 'https://api.themoviedb.org/3/';\n\nconst ERROR_MESSAGE = 'Error. Request failed.';\n\n// Request for Home\nexport async function fetchTrendingMovies() {\n    try {\n        const response = await axios.get(`trending/all/day?api_key=${KEY}`, {\n          params: {\n            api_key: KEY,\n          },\n        },\n        );\n        return response.data.results;\n      } catch {\n        console.log(ERROR_MESSAGE);\n      }\n}\n\n// Request for Movies\nexport async function fetchSearchMovies(search) {\n  try {\n    const response = await axios.get(`search/movie`, {\n      params: {\n        api_key: KEY,\n        query: search,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.log(ERROR_MESSAGE);\n  }\n}\n\n// Request for MovieDetails\nexport async function fetchMovieById(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n    return response;\n  } catch {\n    console.log(ERROR_MESSAGE);\n  }\n}\n\n// Request for Cast\nexport async function fetchMovieCast(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.log(ERROR_MESSAGE);\n  }\n}\n\n// Request for Reviews\nexport async function fetchMovieReviews(movieId) {\n  try {\n    const response = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: KEY,\n      },\n    });\n    return response;\n  } catch (error) {\n    console.log(ERROR_MESSAGE);\n  }\n}"],"names":["display","justifyContent","padding","height","width","color","ariaLabel","radius","movies","location","useLocation","map","id","title","name","to","state","from","ERROR_MESSAGE","useState","setMovies","notFound","setNotFound","error","setError","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","query","get","useEffect","controller","AbortController","signal","getSearchMovies","abort","fetchSearchMovies","response","data","results","length","onSubmit","e","searchQuery","currentTarget","elements","search","value","type","autoComplete","autoFocus","placeholder","size","style","KEY","axios","fetchTrendingMovies","params","api_key","console","log","fetchMovieById","movieId","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}